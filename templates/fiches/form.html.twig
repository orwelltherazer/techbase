{% extends 'base.html.twig' %}

{% block title %}Techbase - {% if fiche %}Modifier : {{ fiche.titre }}{% else %}Nouvelle fiche{% endif %}{% endblock %}

{% block body %}
<!-- Header -->
<div class="mb-6">
  <h1 class="text-2xl font-bold text-gray-900">{% if fiche %}Modifier la fiche{% else %}Nouvelle fiche{% endif %}</h1>
</div>

<form method="POST" action="./?action={% if fiche %}edit&id={{ fiche.id }}{% else %}new{% endif %}" class="grid grid-cols-1 xl:grid-cols-12 gap-6">

  <!-- Colonne principale (8/12) -->
  <div class="xl:col-span-8 space-y-6">
    <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <label for="titre" class="block text-sm font-semibold text-gray-700 mb-2">Titre *</label>
      <input type="text" id="titre" name="titre" required value="{{ fiche.titre|default('') }}" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
    </div>

    <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <label for="description" class="block text-sm font-semibold text-gray-700 mb-2">Description</label>
      <textarea id="description" name="description" rows="12" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm">{{ fiche.description|default('') }}</textarea>
    </div>

    <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <label class="block text-sm font-semibold text-gray-700 mb-2">Tags</label>
      <div class="flex flex-wrap gap-2 items-center border border-gray-300 rounded-lg p-3 min-h-[50px] bg-gray-50" id="tagsInput">
        {% for tag in fiche.tags|default([]) %}
          <span class="inline-flex items-center gap-2 px-3 py-1 bg-teal-50 text-primary rounded-full text-sm font-semibold border border-teal-200" data-tag="{{ tag }}">
            {{ tag }}
            <button type="button" onclick="removeTag(this, '{{ tag }}')" class="text-primary hover:text-primary-dark font-bold">×</button>
          </span>
        {% endfor %}
        <button type="button" onclick="openTagModal()" class="px-3 py-1 bg-primary text-white rounded-lg hover:bg-primary-dark transition text-sm font-medium">
          + Tags
        </button>
      </div>
      <input type="hidden" name="tags" id="tagsHidden" value="{{ fiche.tags|join(',')|default('') }}">
    </div>
  </div>

  <!-- Sidebar (4/12) -->
  <div class="xl:col-span-4 space-y-6">
    <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <label for="rubrique_id" class="block text-sm font-semibold text-gray-700 mb-2">Rubrique</label>
      <select id="rubrique_id" name="rubrique_id" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
        {% for rub in rubriques %}
        <option value="{{ rub.id }}"
          {% if fiche and fiche.rubrique_id == rub.id %}
            selected
          {% elseif not fiche and preselect_rubrique_id == rub.id %}
            selected
          {% elseif not fiche and not preselect_rubrique_id and loop.first %}
            selected
          {% endif %}>
          {{ rub.nom }}
        </option>
        {% endfor %}
      </select>
    </div>

    <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <label for="etat" class="block text-sm font-semibold text-gray-700 mb-2">État *</label>
      <select id="etat" name="etat" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
        <option value="À faire" {% if fiche.etat == 'À faire' %}selected{% endif %}>À faire</option>
        <option value="En cours" {% if fiche.etat == 'En cours' %}selected{% endif %}>En cours</option>
        <option value="Terminé" {% if fiche.etat == 'Terminé' %}selected{% endif %}>Terminé</option>
      </select>
    </div>

    <div class="space-y-3">
      <button type="submit" class="w-full inline-flex items-center justify-center gap-2 px-4 py-3 bg-primary text-white rounded-lg hover:bg-primary-dark transition font-medium">
        <i class="fas fa-save"></i>
        Enregistrer
      </button>
      <a href="./" class="w-full block text-center px-4 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium">
        Annuler
      </a>
    </div>
  </div>
</form>

<!-- Modal tags -->
<div id="tagModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" onclick="if(event.target===this) closeTagModal()">
  <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] flex flex-col">
    <div class="flex justify-between items-center p-4 border-b border-gray-200">
      <h3 class="text-lg font-semibold text-gray-900">Sélectionner des tags</h3>
      <button type="button" onclick="closeTagModal()" class="text-gray-400 hover:text-gray-600 text-2xl leading-none">×</button>
    </div>

    <div class="flex-1 overflow-y-auto p-6 space-y-6">
      <input type="text" id="tagSearch" placeholder="Rechercher..." onkeyup="filterTags()" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">

      {% for groupe in groupes_tags %}
      <div data-category="{{ groupe.nom }}">
        <div class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">{{ groupe.nom }}</div>
        <div class="grid grid-cols-3 sm:grid-cols-4 gap-1.5">
          {% for tag in groupe.tags %}
          <div class="px-2 py-1 border border-gray-300 rounded text-sm text-center cursor-pointer hover:border-primary hover:bg-gray-50 transition {% if fiche and tag.nom in fiche.tags %}bg-primary text-white border-primary{% endif %}"
               data-tag="{{ tag.nom }}"
               data-search="{{ tag.nom|lower }}"
               onclick="toggleTag(this)">
            {{ tag.nom }}
          </div>
          {% endfor %}
        </div>
      </div>
      {% endfor %}
    </div>

    <div class="flex justify-end gap-3 p-4 border-t border-gray-200 bg-gray-50 rounded-b-lg">
      <button type="button" onclick="closeTagModal()" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium">
        Annuler
      </button>
      <button type="button" onclick="applyTags()" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark transition font-medium">
        Appliquer (<span id="selectedCount">0</span>)
      </button>
    </div>
  </div>
</div>

<script>
let selectedTags = new Set();
document.addEventListener('DOMContentLoaded', () => {
  document.querySelector('#tagsHidden').value.split(',').filter(t => t).forEach(t => selectedTags.add(t));
  document.getElementById('selectedCount').textContent = selectedTags.size;
});

function openTagModal() {
  document.getElementById('tagModal').classList.remove('hidden');
  document.body.style.overflow = 'hidden';
}

function closeTagModal() {
  document.getElementById('tagModal').classList.add('hidden');
  document.body.style.overflow = '';
  document.getElementById('tagSearch').value = '';
  filterTags();
}

function toggleTag(el) {
  const tag = el.dataset.tag;
  if (selectedTags.has(tag)) {
    selectedTags.delete(tag);
    el.classList.remove('bg-primary', 'text-white', 'border-primary');
    el.classList.add('border-gray-300');
  } else {
    selectedTags.add(tag);
    el.classList.add('bg-primary', 'text-white', 'border-primary');
    el.classList.remove('border-gray-300');
  }
  document.getElementById('selectedCount').textContent = selectedTags.size;
}

function applyTags() {
  const container = document.querySelector('#tagsInput');
  container.querySelectorAll('[data-tag]').forEach(el => {
    if (el.tagName === 'SPAN') el.remove();
  });

  const addBtn = container.querySelector('button');
  selectedTags.forEach(tag => {
    const span = document.createElement('span');
    span.className = 'inline-flex items-center gap-2 px-3 py-1 bg-teal-50 text-primary rounded-full text-sm font-semibold border border-teal-200';
    span.dataset.tag = tag;
    span.innerHTML = `${tag} <button type="button" onclick="removeTag(this, '${tag}')" class="text-primary hover:text-primary-dark font-bold">×</button>`;
    container.insertBefore(span, addBtn);
  });
  document.querySelector('#tagsHidden').value = Array.from(selectedTags).join(',');
  closeTagModal();
}

function removeTag(btn, tag) {
  btn.closest('[data-tag]').remove();
  selectedTags.delete(tag);
  const opt = document.querySelector(`[data-tag="${tag}"]`);
  if (opt && opt.classList.contains('bg-primary')) {
    opt.classList.remove('bg-primary', 'text-white', 'border-primary');
    opt.classList.add('border-gray-300');
  }
  document.querySelector('#tagsHidden').value = Array.from(selectedTags).join(',');
  document.getElementById('selectedCount').textContent = selectedTags.size;
}

function filterTags() {
  const search = document.getElementById('tagSearch').value.toLowerCase();
  document.querySelectorAll('[data-category]').forEach(cat => {
    let hasVisible = false;
    cat.querySelectorAll('[data-search]').forEach(tag => {
      if (tag.dataset.search.includes(search)) {
        tag.style.display = '';
        hasVisible = true;
      } else {
        tag.style.display = 'none';
      }
    });
    cat.style.display = hasVisible ? '' : 'none';
  });
}

document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape' && !document.getElementById('tagModal').classList.contains('hidden')) {
    closeTagModal();
  }
});
</script>
{% endblock %}