{% extends 'base.html.twig' %}

{% block title %}Techbase - Médias{% endblock %}

{% block body %}
<div class="page-header-sticky">
  <h1 class="text-3xl font-bold text-gray-900 mb-2">Médias</h1>
</div>

<!-- Notifications -->
{% if success %}
<div class="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg mb-6 flex items-center gap-3 transition-all duration-300" id="successNotification">
  <i class="fas fa-check-circle text-lg"></i>
  <span>{{ success }}</span>
  <button onclick="closeNotification('successNotification')" class="ml-auto text-green-600 hover:text-green-800">
    <i class="fas fa-times"></i>
  </button>
</div>
{% endif %}

{% if errors %}
<div class="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg mb-6 flex items-center gap-3 transition-all duration-300" id="errorNotification">
  <i class="fas fa-exclamation-circle text-lg"></i>
  <span>{{ errors }}</span>
  <button onclick="closeNotification('errorNotification')" class="ml-auto text-red-600 hover:text-red-800">
    <i class="fas fa-times"></i>
  </button>
</div>
{% endif %}

<div class="flex gap-6">
  <!-- Zone principale - Liste des médias (3/4) -->
  <div class="flex-1" style="flex: 0 0 75%;">
    <!-- Filtres et recherche -->
    <div class="flex gap-4 mb-6 items-center flex-wrap">
      <div class="flex-1 relative">
        <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
        <input type="text" id="searchMedia" class="w-full pl-11 pr-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Rechercher un média...">
      </div>
      <div class="flex gap-2">
        <button class="px-4 py-2.5 border border-gray-300 bg-white rounded-lg cursor-pointer text-sm font-semibold text-gray-700 transition hover:bg-gray-50 hover:border-gray-400 flex items-center gap-2 active" data-type="all">
          <i class="fas fa-th text-sm"></i> Tout
        </button>
        <button class="px-4 py-2.5 border border-gray-300 bg-white rounded-lg cursor-pointer text-sm font-semibold text-gray-700 transition hover:bg-gray-50 hover:border-gray-400 flex items-center gap-2 filter-btn" data-type="image">
          <i class="fas fa-image text-sm"></i> Images
        </button>
        <button class="px-4 py-2.5 border border-gray-300 bg-white rounded-lg cursor-pointer text-sm font-semibold text-gray-700 transition hover:bg-gray-50 hover:border-gray-400 flex items-center gap-2 filter-btn" data-type="pdf">
          <i class="far fa-file text-sm"></i> PDF
        </button>
      </div>
    </div>

    <!-- Liste des médias -->
    <div class="bg-white border border-gray-200 rounded-xl overflow-hidden shadow-sm">
      {% if medias|length > 0 %}
        <div class="divide-y divide-gray-200" id="mediaList">
          {% for media in medias %}
          <div class="flex items-center gap-4 p-4 hover:bg-gray-50 transition media-item" data-type="{{ media.type }}" data-name="{{ media.nom|lower }}">
            <!-- Miniature -->
            <div class="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden">
              {% if media.type == 'image' %}
                <img src="{{ media.url }}" alt="{{ media.nom }}" class="w-full h-full object-cover">
              {% else %}
                <i class="fas fa-file-pdf text-2xl text-red-500"></i>
              {% endif %}
            </div>

            <!-- Informations -->
            <div class="flex-1 min-w-0">
              <div class="font-semibold text-gray-900 truncate mb-1" title="{{ media.nom }}">{{ media.nom }}</div>
              <div class="flex items-center gap-4 text-sm text-gray-600">
                <span class="flex items-center gap-1">
                  <i class="fas fa-calendar text-xs"></i>
                  {{ media.date_format }}
                </span>
                <span class="flex items-center gap-1">
                  <i class="fas fa-weight text-xs"></i>
                  {{ media.taille_format }}
                </span>
                <span class="flex items-center gap-1">
                  {% if media.type == 'image' %}
                    <i class="fas fa-image text-xs text-blue-500"></i>
                    <span class="text-blue-500">Image</span>
                  {% else %}
                    <i class="fas fa-file-pdf text-xs text-red-500"></i>
                    <span class="text-red-500">PDF</span>
                  {% endif %}
                </span>
              </div>
            </div>

            <!-- Actions -->
            <div class="flex gap-2 flex-shrink-0">
              <button class="px-3 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark transition text-sm font-medium" onclick="copyMarkdown('{{ media.nom }}', '{{ media.url }}')" title="Copier le lien Markdown">
                <i class="fas fa-code"></i>
              </button>
              <button class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition text-sm font-medium" onclick="deleteMedia({{ media.id }}, '{{ media.nom }}')" title="Supprimer">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
        <div class="text-center py-12">
          <i class="fas fa-images text-6xl text-gray-300 mb-4"></i>
          <div class="text-xl font-semibold text-gray-900 mb-2">Aucun média</div>
          <div class="text-gray-600">Commencez par téléverser vos premiers fichiers</div>
        </div>
      {% endif %}
    </div>
  </div>

  <!-- Sidebar - Zone d'upload (1/4) -->
  <div class="w-1/4" style="flex: 0 0 25%;">
    <div class="bg-white border border-gray-200 rounded-xl p-6 shadow-sm sticky top-6">
      <h2 class="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
        <i class="fas fa-cloud-upload-alt text-primary"></i>
        Upload
      </h2>
      
      <form method="POST" enctype="multipart/form-data" id="uploadForm">
        <input type="hidden" name="action" value="upload_media">
        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer transition hover:border-primary hover:bg-teal-50 bg-gray-50" id="dropzone">
          <i class="fas fa-cloud-upload-alt text-4xl text-primary mb-3 block"></i>
          <h3 class="text-base font-semibold mb-2 text-gray-900">Glissez vos fichiers</h3>
          <p class="text-sm text-gray-600 mb-3">ou cliquez pour sélectionner</p>
          <input type="file" name="media[]" id="fileInput" accept="image/jpeg,image/png,application/pdf" multiple hidden>
          <small class="text-gray-500 text-xs block">JPEG, PNG, PDF<br>Max : 10 Mo/fichier</small>
        </div>
        <button type="submit" class="hidden mt-4 w-full px-4 py-2.5 bg-primary text-white rounded-lg hover:bg-primary-dark transition font-semibold" id="uploadBtn">
          <i class="fas fa-upload"></i>
          Téléverser
        </button>
      </form>

      <!-- Statistiques -->
      <div class="mt-6 pt-6 border-t border-gray-200">
        <h3 class="text-sm font-semibold text-gray-900 mb-3">Statistiques</h3>
        <div class="space-y-2 text-sm">
          <div class="flex justify-between text-gray-600">
            <span>Total médias</span>
            <span class="font-semibold text-gray-900">{{ medias|length }}</span>
          </div>
          <div class="flex justify-between text-gray-600">
            <span>Images</span>
            <span class="font-semibold text-gray-900">{{ medias|filter(m => m.type == 'image')|length }}</span>
          </div>
          <div class="flex justify-between text-gray-600">
            <span>PDF</span>
            <span class="font-semibold text-gray-900">{{ medias|filter(m => m.type == 'pdf')|length }}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal de confirmation -->
<div class="hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50" id="deleteModal">
  <div class="bg-white rounded-lg max-w-md w-full mx-4 shadow-xl">
    <div class="flex justify-between items-center p-4 border-b border-gray-200">
      <h3 class="text-lg font-semibold text-gray-900">Confirmer la suppression</h3>
      <button onclick="closeDeleteModal()" class="text-gray-400 hover:text-gray-600 text-2xl leading-none">&times;</button>
    </div>
    <div class="p-4">
      <p class="text-gray-700">Êtes-vous sûr de vouloir supprimer <strong id="deleteMediaName"></strong> ?</p>
      <p class="text-gray-600 text-sm mt-2">Cette action est irréversible.</p>
    </div>
    <div class="flex justify-end gap-3 p-4 border-t border-gray-200 bg-gray-50 rounded-b-lg">
      <button class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium" onclick="closeDeleteModal()">Annuler</button>
      <button class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition font-medium" id="confirmDeleteBtn">
        <i class="fas fa-trash"></i> Supprimer
      </button>
    </div>
  </div>
</div>

<!-- Toast de notification -->
<div class="fixed bottom-8 right-8 bg-primary text-white px-6 py-4 rounded-lg flex items-center gap-3 shadow-lg opacity-0 translate-y-4 transition-all pointer-events-none z-50 font-semibold text-sm" id="toast">
  <i class="fas fa-check-circle text-lg"></i>
  <span id="toastMessage">Lien Markdown copié !</span>
</div>

<script>
// Auto-fermeture des notifications après 5 secondes
document.addEventListener('DOMContentLoaded', () => {
  const successNotif = document.getElementById('successNotification');
  const errorNotif = document.getElementById('errorNotification');
  
  if (successNotif) {
    setTimeout(() => closeNotification('successNotification'), 5000);
  }
  
  if (errorNotif) {
    setTimeout(() => closeNotification('errorNotification'), 5000);
  }
});

function closeNotification(id) {
  const notif = document.getElementById(id);
  if (notif) {
    notif.style.opacity = '0';
    notif.style.transform = 'translateY(-10px)';
    setTimeout(() => notif.remove(), 300);
  }
}

// Upload zone
const dropzone = document.getElementById('dropzone');
const fileInput = document.getElementById('fileInput');
const uploadBtn = document.getElementById('uploadBtn');

dropzone.addEventListener('click', () => fileInput.click());

dropzone.addEventListener('dragover', (e) => {
  e.preventDefault();
  dropzone.classList.add('border-primary', 'bg-teal-50', 'scale-[1.01]');
});

dropzone.addEventListener('dragleave', () => {
  dropzone.classList.remove('border-primary', 'bg-teal-50', 'scale-[1.01]');
});

dropzone.addEventListener('drop', (e) => {
  e.preventDefault();
  dropzone.classList.remove('border-primary', 'bg-teal-50', 'scale-[1.01]');
  fileInput.files = e.dataTransfer.files;
  updateUploadBtn();
});

fileInput.addEventListener('change', updateUploadBtn);

function updateUploadBtn() {
  if (fileInput.files.length > 0) {
    uploadBtn.classList.remove('hidden');
    uploadBtn.innerHTML = `<i class="fas fa-upload"></i> Téléverser ${fileInput.files.length} fichier(s)`;
  } else {
    uploadBtn.classList.add('hidden');
  }
}

// Filtres
const filterBtns = document.querySelectorAll('[data-type]');
const mediaItems = document.querySelectorAll('.media-item');
const searchInput = document.getElementById('searchMedia');

filterBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    filterBtns.forEach(b => {
      b.classList.remove('active', 'bg-primary', 'text-white', 'border-primary');
      b.classList.add('bg-white', 'text-gray-700');
    });
    btn.classList.add('active', 'bg-primary', 'text-white', 'border-primary');
    btn.classList.remove('bg-white', 'text-gray-700');
    filterMedia();
  });
});

searchInput.addEventListener('input', filterMedia);

function filterMedia() {
  const activeType = document.querySelector('[data-type].active').dataset.type;
  const searchTerm = searchInput.value.toLowerCase();

  mediaItems.forEach(item => {
    const itemType = item.dataset.type;
    const itemName = item.dataset.name;
    const matchesType = activeType === 'all' || itemType === activeType;
    const matchesSearch = itemName.includes(searchTerm);

    if (matchesType && matchesSearch) {
      item.classList.remove('hidden');
    } else {
      item.classList.add('hidden');
    }
  });
}

// Copier le lien Markdown
function copyMarkdown(name, url) {
  event.preventDefault();
  event.stopPropagation();
  
  const isImage = url.match(/\.(jpg|jpeg|png)$/i);
  const markdown = isImage ? `![${name}](${url})` : `[${name}](${url}){:target="_blank"}`;

  navigator.clipboard.writeText(markdown).then(() => {
    showToast('Lien Markdown copié !');
  }).catch(err => {
    console.error('Erreur lors de la copie:', err);
  });
}

// Supprimer
let deleteMediaId = null;

function deleteMedia(id, name) {
  event.preventDefault();
  event.stopPropagation();
  
  deleteMediaId = id;
  document.getElementById('deleteMediaName').textContent = name;
  const modal = document.getElementById('deleteModal');
  modal.classList.remove('hidden');
  modal.classList.add('flex');
}

function closeDeleteModal() {
  const modal = document.getElementById('deleteModal');
  modal.classList.add('hidden');
  modal.classList.remove('flex');
  deleteMediaId = null;
}

document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
  if (deleteMediaId) {
    const form = document.createElement('form');
    form.method = 'POST';
    form.innerHTML = `
      <input type="hidden" name="action" value="delete_media">
      <input type="hidden" name="id" value="${deleteMediaId}">
    `;
    document.body.appendChild(form);
    form.submit();
  }
});

// Toast
function showToast(message) {
  const toast = document.getElementById('toast');
  const toastMessage = document.getElementById('toastMessage');
  toastMessage.textContent = message;
  toast.classList.remove('opacity-0', 'translate-y-4');
  toast.classList.add('opacity-100', 'translate-y-0');

  setTimeout(() => {
    toast.classList.add('opacity-0', 'translate-y-4');
    toast.classList.remove('opacity-100', 'translate-y-0');
  }, 3000);
}
</script>
{% endblock %}